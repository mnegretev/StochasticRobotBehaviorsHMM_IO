/********************************
*				*
*	 hmm_lib.h		*
*	 Basic HMM libraries	*
*				*
*		Jesus Savage	*
*		FI-UNAM		*
*		4-24-2009	*
*		5-5-2013	*
*				*
*				*
*********************************/

#include "new_allocate.h"

#define NUM_STATES 32
#define NUM_BITS_DESTINATION 2


typedef struct _Centroid{
        int num;
        float x,y,theta,sensors[NUM_MAX_SENSORS];
} Centroid;


struct hmm_database {
        char objects_file[300];
        double bigger, prob[NUM_MAX_CENTROIDS], p;
        double vit_prob[NUM_MAX_CENTROIDS];
        int index;
        int index_vit ;
        double bigger_vit;
        float **ais, *pis, **bis, **cis;
        int num_bits_inputs;
        int num_states;
	int num_obs_symbols;
	int num_out_symbols;
	int num_vectors;
        int  *seq_states;
        int *observations;
};




struct vector_quantizer {
        char  in_file[300];
        int num_vectors;
        Centroid *centroids;
        Centroid *centroids_vision;
        int size_vectors; //=3
        Raw *vectors;
        char path[300];
        char data_file[300];
        int size_vq;
        int num_centroids_vision;
        char vq_file[300];
};





void vq_initialize(struct vector_quantizer *vq) {
        if ((vq->centroids_vision = (Centroid *)
                malloc( (vq->size_vq + 1) * sizeof(Centroid))) == NULL) {
                fprintf(stdout, "Allocation error: centroids");
                exit(0);
        }
        vq->size_vectors = 3;
        //vq->num_centroids_vision = read_vision_centroids(vq->vq_file, vq->centroids_vision, vq->size_vectors, vq->size_vq, vq->path);
        vq->size_vq=5;

}




void vq_allocate_vectors(struct vector_quantizer *vq) {
        if ((vq->vectors = (Raw *) malloc( (vq->num_vectors + 1) * sizeof(Raw))) == NULL) {
                fprintf(stdout, "Allocation error: Raw vectors");
                exit(0);
        }
}



// it initializes the hmm
void hmm_initialize(struct hmm_database *hmm) {
        int i,j;

        hmm->index = 1;
        hmm->index_vit = -1;


	// It allocates the matrices used for the hmm evaluation
        if ((hmm->ais = (float **)alloc_matrix(hmm->num_states + 1, hmm->num_states + 1 )) == 0) {
                        printf("\n Memory allocation error ");
                        exit(1);
        }
        if ((hmm->bis = (float **)alloc_matrix(hmm->num_states + 1, hmm->num_obs_symbols + 1)) == 0) {
                        printf("\n Memory allocation error ");
                        exit(1);
        }
        if ((hmm->cis = (float **)alloc_matrix(hmm->num_states + 1, hmm->num_out_symbols + 1)) == 0) {
                        printf("\n Memory allocation error ");
                        exit(1);
        }
        if ((hmm->pis = (float *)alloc_vector(hmm->num_states + 1)) == 0) {
                        printf("\n Memory allocation error ");
                        exit(1);
        }

        if ((hmm->observations = (int *) alloc_vector_int((hmm->num_vectors + 1)) ) == 0) {
                printf("\n Memory allocation error: observations ");
                exit(0);
        }

	// it allocates the states vectors
        if ((hmm->seq_states = (int *) alloc_vector_int((hmm->num_vectors + 1))) == 0) {
                        printf("\n Memory allocation error: observations ");
                        exit(0);
        }

}
     
/* Function that that calculate the first state from the pis */
int calculate_hmm_first_state(struct hmm_database hmm)
{
 int i,j;
 float rand;
 float tmp;


 // it generates a Uniform random variable between 0 and 1
 rand=generaR(0.0,1.0);
 printf(" random %f\n",rand);


 tmp=hmm.pis[1];

 for(j=1;j<=hmm.num_states;j++){
        if(rand <= tmp){
		i=j;
		j=hmm.num_states+1;
	} else{
		tmp= tmp + hmm.pis[j+1];
		i=j;
	}
   }

   printf(" Initial HMM state %d tmp %f\n",i,tmp);

   return i;

}

/* Function that caluclates the HMM output from the C matrix */
int calculate_hmm_output(struct hmm_database hmm,int state)
{
 int i,j;
 float rand;
 float tmp;


 // it generates a Uniform random variable between 0 and 1
 rand=generaR(0.0,1.0);
 //printf(" random %f\n",rand);


 tmp=hmm.cis[state][1];
 //printf(" HMM 1 sum %f\n",tmp);

 for(j=1;j<=hmm.num_out_symbols;j++){
        if(rand <= tmp){
                i=j;
                j=hmm.num_out_symbols+1;
        } else{
                tmp= tmp + hmm.cis[state][j+1];
   		//printf(" HMM j %d sum %f\n",j+1,tmp);
                i=j;
        }
   }

   i--;
   //printf(" HMM output symbol %d tmp %f\n",i,tmp);

   return i;

}



/* Function that calculates the HMM next state from the A matrix */
int calculate_hmm_next_state(struct hmm_database hmm,int state)
{
 int i,j;
 float rand;
 float tmp;


 // it generates a Uniform random variable between 0 and 1
 rand=generaR(0.0,1.0);
 //printf(" Next state random %f\n",rand);


 tmp=hmm.ais[state][1];
 //printf(" HMM next state 1 sum %f\n",tmp);

 for(j=1;j<=hmm.num_states;j++){
        if(rand <= tmp){
                i=j;
                j=hmm.num_states+1;
        } else{
                tmp= tmp + hmm.ais[state][j+1];
                //printf(" HMM next state j %d sum %f\n",j+1,tmp);
                i=j;
        }
   }

   //printf(" HMM next state %d tmp %f\n",i,tmp);

   return i;

}



/* Function that reads the ais,bis and pis of a hmm */
void read_hmms(struct hmm_database *hmm, int flg_read,char *path)
{
   FILE *fp2;
   float average,tmp;
   int j,k;
   char input_file[300];
   int n_states,n_obs_symbols,n_out_symbols;
   int n_bits_inputs;


   /* It opens the hmm file */
   sprintf(input_file,"%s%s.prb",path,hmm->objects_file);
   //printf("Reading HMM FILE: %s\n",input_file);
   fp2=fopen(input_file,"r");
   if(fp2==0){
        printf("\n File %s does not exists",input_file);
        exit(0);
   }

   /* It reads the number of states, observation symbols and output symbols */
   fscanf(fp2,"%d",&n_bits_inputs);
   hmm->num_bits_inputs=n_bits_inputs- NUM_BITS_DESTINATION;
   fscanf(fp2,"%d",&n_states);
   hmm->num_states=n_states;
   fscanf(fp2,"%d",&n_obs_symbols);
   hmm->num_obs_symbols=n_obs_symbols;
   fscanf(fp2,"%d",&n_out_symbols);
   hmm->num_out_symbols=n_out_symbols;


   if(flg_read==0) {
		fclose(fp2);
   		printf("Num.states %d num.obs_symbols %d num_out_symbols %d\n",n_states,n_obs_symbols,n_out_symbols); 
		return;
   }

   /* It reads the transition  and initial probabilities */
   average=0;
   for(j=1;j<=n_states;j++){
        fscanf(fp2,"%f",&tmp);
        hmm->pis[j]=tmp;
        printf(" pi[%d] %f\n",j,hmm->pis[j]);
        average+=hmm->pis[j];
   }

   printf("\n sum pis %f\n",average);

   for(j=1;j<=n_states;j++){
        average=0;
        for(k=1;k<=n_states;k++){
                fscanf(fp2,"%f",&tmp);
                hmm->ais[j][k]=tmp;
                printf("\n a[%d][%d] %f",j,k,hmm->ais[j][k]);
                average+=hmm->ais[j][k];
        }
        printf("\n %d.- sum= ais %f\n",j,average);
   }

   for(j=1;j<=n_states;j++){
        average=0;
        for(k=1;k<=n_obs_symbols;k++){
                     fscanf(fp2,"%f",&tmp);
                     hmm->bis[j][k]=tmp;
                     printf("b[%d][%d] %f\n",j,k,hmm->bis[j][k]);
                     average+=hmm->bis[j][k];
        }
        printf("sum bis[%d] %f\n",j,average);
   }

   for(j=1;j<=n_states;j++){
        average=0;
        for(k=1;k<=n_out_symbols;k++){
                     fscanf(fp2,"%f",&tmp);
                     hmm->cis[j][k]=tmp;
                     printf("c[%d][%d] %f\n",j,k,hmm->cis[j][k]);
                     average+=hmm->cis[j][k];
        }
        printf("sum cis[%d] %f\n",j,average);
   }

   fclose(fp2);


}





void q_free(struct vector_quantizer *vq) {
        free(vq->vectors);
        free(vq->centroids_vision);
        free(vq->centroids);
}

void hmm_free(struct hmm_database *hmm) {
        int i,j;

       	free(hmm->seq_states);
        free(hmm->ais);
        free(hmm->bis);
        free(hmm->cis);
        free(hmm->pis);
}






/* It calculates the probability of an hmm given an observation vector */
double get_hmm_prob(int *obs,float **a,float **b,float *pi,int num_obs,int num_states)
{
   int dummy;
   int t,i,j,k;
   double tran,temp;
   double menor,**alfa,ct,p,ctexp;



   if((alfa=(double **)alloc_matrix_double(num_obs,num_states+1)) == NULL){
         printf("\n Memory allocation error ");
         exit(0);
   }
   t=1;
   ct=0.;

   for(i=1;i<=num_states;i++){
                alfa[t][i]=pi[i]*b[i][obs[t]];
   }


   tran=0.;
   for(i=1;i<=num_states;i++)tran=tran+alfa[t][i];

   for(i=1;i<=num_states;i++)alfa[t][i]=alfa[t][i]/tran;

   tran=1/tran;
   ct=log(tran);
   t=t+1;

   //printf(" num_obs %d\n",num_obs);

   for(dummy=2;dummy<num_obs;dummy++){

                //printf("obs[%d] %d\n",t,obs[t]);

                for(j=1;j<=num_states;j++){

                        tran=0.;
                        for(i=1;i<=num_states;i++){
                                tran=alfa[t-1][i]*a[i][j]+tran;
                        }

                        alfa[t][j]=tran*b[j][obs[t]];
                }

                tran=0.;

                for(j=1;j<=num_states;j++)tran=tran+alfa[t][j];

                for(j=1;j<=num_states;j++){
                        alfa[t][j]=alfa[t][j]/tran;
                }

                tran=1/tran;
                ct=ct+log(tran);
                t++;
   }

   p= exp(-ct);
   //printf("Probability log(P) %f P %e ",-ct,p);
   p= -ct;
   // The result is divided by 100 in order that the result fits the variable size
   p=exp(p/100.);
   //printf("P/100 %e\n",p);

   free_matrix_double(alfa,num_obs);

   return(-ct);
   //return(-ct/100);

}



/* It calculates the best sequence of states using the Viterbi algorithm
and the probability of a hmm given a symbol vector */
double viterbi_best_sequence(int *ob, float **a, float **b, float *pi, int num_obs, int num_states, int *qs, int flg_old)
{
   int t,i,j;
   double bigger=0;
   double **delta,*trans;
   int *q,indice=0,tmay=0,**psi;
   static double delta_old[NUM_STATES];

 /* It allocates the matrices and vectors used */
    if((psi =(int **)alloc_matrix_int(num_obs+2,num_states+1)) == 0){
         printf("\n Memory allocation error ");
         exit(0);
    }

    if((delta=(double **)alloc_matrix_double(num_obs+2,num_states+1)) == 0){
         printf("\n Memory allocation error ");
         exit(0);
    }


    if((trans=(double *)alloc_vector_double(num_states+1)) == 0){
         printf("\n Memory allocation error ");
         exit(0);
    }

    if((q =(int *)alloc_vector_int(num_obs+2)) == 0){
         printf("\n Memory allocation error ");
         exit(0);
    }

  for(j=0;j<=num_states;j++){
        trans[j]=0;
  }
  for(i=0;i<=num_obs;i++){
        for(j=0;j<=num_states;j++){
                psi[i][j]=0;
                delta[i][j]=0;
        }
        q[i]=0;
  }




  /* Viterbi Algorithm */
   tmay=num_obs;

   //printf(" ob[%d] %d\n",1,ob[1]);

   for(j=1;j<=num_states;j++){
		//it checks if its the first time the Viterbi is performed
		if(flg_old==1){
                	delta[1][j]=(double)pi[j]*b[j][ob[1]];
                	psi[1][j]= 0;
		}
                else{
			bigger=0.;
                        for(i=1;i<=num_states;i++){
                          trans[i]=delta_old[i]*(double)a[i][j]*b[j][ob[1]];
                          //printf("\n next delta[%d][%d] %e",1,i,delta_old[i]);
                          //printf("\n a[%d][%d] %f",i,j,a[i][j]);
                          //printf("\n b[%d][%d] %f",j,ob[t],b[j][ob[t]]);
                          //printf("\n trans[%d] %f",i,trans[i]);
                          if(trans[i]>bigger){
                                        bigger=trans[i];
                                        indice=i;
                          }

                        }

                        delta[1][j]=bigger;
                        psi[1][j]=indice;

             	}


		/*printf("\n ini delta[%d][%d] %f",1,i,delta[1][i]);
                printf("\n b[%d][%d] %f",i,ob[1],b[i][ob[1]]);*/
   }

   for(t=2;t<=tmay;t++){

                //printf(" ob[%d] %d\n",t,ob[t]);

                for(j=1;j<=num_states;j++){
                        bigger=0.;
                        for(i=1;i<=num_states;i++){
                          trans[i]=delta[t-1][i]*
                                        (double)a[i][j]*b[j][ob[t]];
                          //printf("\n delta[%d][%d] %e",t-1,i,delta[t-1][i]);
                          //printf("\n a[%d][%d] %f",i,j,a[i][j]);
                          //printf("\n b[%d][%d] %f",j,ob[t],b[j][ob[t]]);
                          //printf("\n trans[%d] %f",i,trans[i]);*/
                          if(trans[i]>bigger){
                                        bigger=trans[i];
                                        indice=i;
                          }

                        }

                        delta[t][j]=bigger;
                        psi[t][j]=indice;
                }

   }


   q[tmay]=indice;
   qs[tmay]=indice;

   for(t=tmay-1;t>0;t--){
                q[t]=psi[t+1][q[t+1]];
                qs[t]=q[t];
   }

   /*
   for(t=1;t<=tmay;t++){
                printf("%d.- symbol %d",t,ob[t]);
                printf(" state %d \n",q[t]);
   }
   */


   bigger=0.;
   for(j=1;j<=num_states;j++){

	//printf("delta[%d][%d] %e\n",tmay,j,delta[tmay][j]);
	if(delta[tmay][j]>bigger)
		bigger=delta[tmay][j];

   }

   for(j=1;j<=num_states;j++){

        // it saves the scaled deltas for the next iteration
        delta_old[j]=delta[tmay][j]/bigger;
        //printf("delta[%d][%d] %e\n",tmay,j,delta[tmay][j]);
        //printf("delta_old[%d][%d] %e\n",tmay,j,delta_old[j]);

   }



   //printf("probability %e\n",bigger);

   free_matrix_double(delta,num_obs+2);
   free_matrix_int(psi,num_obs+2);
   free_vector_double(trans);
   free_vector_int(q);

   return(bigger);

}


int get_next_state_hmm_viterbi(int o, int flg_old, struct hmm_database hmm, int state)
{
  int t,i,j,ob;
  double bigger=0;
  int indice=0,tmay=0;
  static double delta_old[NUM_STATES];
  int psi[NUM_STATES];
  double delta[NUM_STATES];
  double trans;
  int next_state;

  ob=o+1;
  printf(" ob %d state %d\n",ob,state);

  //it checks if its the first time 
  if(flg_old==1){
        bigger=0.;
        for(j=1;j<=hmm.num_states;j++){
                delta[j]=(double)hmm.pis[j]*hmm.bis[j][ob];
                if(delta[j]>bigger){
                          bigger=delta[j];
               }

                printf("pis[%d] %f bis[%d][%d] %f\n",j,hmm.pis[j],j,ob,hmm.bis[j][ob]);
                printf("delta[%d] %e\n",j,delta[j]);
                next_state=state;
        }
  }
  else{
        // it gets the state according the HMM A matrix

        for(j=1;j<=hmm.num_states;j++){
            bigger=0.;
            for(i=1;i<=hmm.num_states;i++){
               trans=delta_old[i]*(double)hmm.ais[i][j]*hmm.bis[j][ob];
               printf("delta_old[%d] %e trans %e\n",i,delta_old[i],trans);
               printf("ais[%d,%d] %f bis[%d][%d] %f\n",i,j,hmm.ais[i][j],j,ob,hmm.bis[j][ob]);
               if(trans > bigger){
                          bigger=trans;
               }
	    }
	    printf("\n");
            delta[j]=bigger;
            printf("delta[%d] %e bigger %e\n\n",j,delta[j],bigger);

         }
  }

  bigger=0.;
   for(j=1;j<=hmm.num_states;j++){
        printf("delta[%d] %e\n",j,delta[j]);
        if(delta[j]>bigger){
                bigger=delta[j];
                next_state=j;
	}
   }


  // it saves the scaled deltas for the next iteration
  for(j=1;j<=hmm.num_states;j++){
        delta_old[j]=delta[j]/bigger;
        printf("new delta_old[%d] %e\n",j,delta_old[j]);
   }

   printf(" Viterbi next state %d\n",next_state);

   return(next_state);

}


// It calculates the next state of a HMM given the present state and a symbol 
int get_next_state_hmm(int o, int flg_old, struct hmm_database hmm, int state)
{
  int t,i,j,ob;
  double bigger=0;
  int indice=0,tmay=0;
  static double delta_old[NUM_STATES];
  int psi[NUM_STATES];
  double delta[NUM_STATES];
  double trans[NUM_STATES];
  int next_state;

  ob=o+1;
  printf(" ob %d\n",ob);

  //it checks if its the first time 
  if(flg_old==1){
        bigger=0.;
   	for(j=1;j<=hmm.num_states;j++){
         	delta[j]=(double)hmm.pis[j]*hmm.bis[j][ob];
		if(delta[j]>bigger){
                          bigger=delta[j];
               }

	 	//printf("pis[%d] %f bis[%d][%d] %f\n",j,hmm.pis[j],j,ob,hmm.bis[j][ob]);
	 	//printf("delta[%d] %e\n",j,delta[j]);
		next_state=state;
   	}
  }
  else{
  	// it gets the state according the HMM A matrix
  	i=calculate_hmm_next_state(hmm,state);
	printf(" Calculated state %d\n",i);

        bigger=0.;
        for(j=1;j<=hmm.num_states;j++){
               delta[j]=delta_old[j]*(double)hmm.ais[i][j]*hmm.bis[j][ob];
	       //printf("delta_old[%d] %e\n",j,delta_old[j]);
	       //printf("ais[%d,%d] %f bis[%d][%d] %f\n",i,j,hmm.ais[i][j],j,ob,hmm.bis[j][ob]);
	       //printf("delta[%d] %e\n",j,delta[j]);
               if(delta[j]>bigger){
                          bigger=delta[j];
   			  next_state=j;
               }
   	       //printf(" next state %d %d\n",j,next_state);
         }
  }

  // it saves the scaled deltas for the next iteration
  for(j=1;j<=hmm.num_states;j++){
        delta_old[j]=delta[j]/bigger;
   }

   //printf(" next state %d\n",next_state);

   return(next_state);

}





/* It calculates the best sequence of states using the Viterbi algorithm
and the probability of a hmm given a symbol vector */
double viterbi(int *observations, float **a, float **b, float *pi, int num_obs, int num_states, int *seq_states)
{
   int i,j,k;
   int *observations_frame,*seq_states_frames;
   int num_frames;
   double partial_prob,total_probability=0;
   int flg_old=1;


 /* it was necessary to separated the observation vector in
    small vectors to better use the Viterbi algorithm, due to
    errors introduced by small acumulated probabilities values */

 num_frames = num_obs/NUM_MAX_OBSERVATIONS;


 // it allocates the observations vectors //
 if((observations_frame = (int *) alloc_vector_int((num_obs+1)) ) == 0){
         printf("\n Memory allocation error: observations ");
         exit(0);
 }

 // it allocates the states vectors
 if((seq_states_frames = (int *) alloc_vector_int((num_obs+1))) == 0){
                printf("\n Memory allocation error: observations ");
                exit(0);
 }


 for(k=0; k< num_frames; k++){
        for(j=k*NUM_MAX_OBSERVATIONS+1,i=1;i<=NUM_MAX_OBSERVATIONS;i++,j++)
                observations_frame[i]= observations[j];

        partial_prob=
		viterbi_best_sequence(observations_frame,a,b,pi,NUM_MAX_OBSERVATIONS,num_states,seq_states_frames,flg_old);
		flg_old=0;

	total_probability=total_probability+log(partial_prob);
 	//printf("block %d partial_prob %e log total_probability %e\n",k,partial_prob,total_probability);

        for(j=k*NUM_MAX_OBSERVATIONS+1,i=1;i<=NUM_MAX_OBSERVATIONS;i++,j++)
                seq_states[j]= seq_states_frames[i];

 }
 for(j=k*NUM_MAX_OBSERVATIONS+1,i=1;i<=num_obs-k*NUM_MAX_OBSERVATIONS;i++,j++)
                observations_frame[i]= observations[j];

 partial_prob=
	viterbi_best_sequence(observations_frame,a,b,pi,num_obs-k*NUM_MAX_OBSERVATIONS, num_states,seq_states_frames,flg_old);

 total_probability=total_probability+log(partial_prob);
 //printf(" partial_prob %e log total_probability %e\n",partial_prob,total_probability);

 for(j=k*NUM_MAX_OBSERVATIONS+1,i=1;i<=num_obs-k*NUM_MAX_OBSERVATIONS;i++,j++)
                seq_states[j]= seq_states_frames[i];


/*
 for(j=1;j<=num_obs;j++){
                printf("%d.- symbol %d",j,observations[j]);
                printf(" state %d \n",seq_states[j]);
 }
*/ 

 return(total_probability);


}



