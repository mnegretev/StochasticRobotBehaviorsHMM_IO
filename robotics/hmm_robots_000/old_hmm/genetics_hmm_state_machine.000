
toplevel .input

# Global variables
global check_population

# Genetics Panel
# Labels
label .input.label_num_points -text "Number of individuals"
label .input.label_num_regions -text "Number of generations"
label .input.label_epsilon -text "Mutation rate"
label .input.label_crossing -text "Crossing rate"
label .input.label_name -text "Population's name"
label .input.label_num_best -text "% of best individuals"
label .input.label_K1 -text "Fitness performance K1"
label .input.label_K2 -text "Fitness potentials path K2"


# Entries
entry .input.num_points -width 5 -textvariable num_points -foreground green -background blue
.input.num_points insert 0 "100"
entry .input.num_regions -width 5 -textvariable num_regions -foreground green -background blue
.input.num_regions insert 0 "100"
entry .input.epsilon -width 5 -textvariable mutation_rate -foreground green -background blue
.input.epsilon insert 0 "0.1"
entry .input.crossing -width 5 -textvariable crossing_rate -foreground green -background blue
.input.crossing insert 0 "0.8"
entry .input.name -width 10 -textvariable name -foreground green -background blue
.input.name insert 0 "avoid"
entry .input.num_best -width 5 -textvariable num_best -foreground green -background blue
.input.num_best insert 0 ".10"
entry .input.k1 -width 5 -textvariable K1 -foreground green -background blue
.input.k1 insert 0 "1.00"
entry .input.k2 -width 5 -textvariable Old_K2 -foreground green -background blue
.input.k2 insert 0 "700.0"


set check_population 1
checkbutton .check_population -text "Use new population" -variable check_population
set check_vasconcelos 0
checkbutton .check_vasconcelos -text "Use Vasconcelos" -variable check_vasconcelos
set check_destination 0
checkbutton .check_dest -text "Use straigh destination" -variable check_dest
set random 0
checkbutton .check_random -text "Add noise" -variable random
set supervised_potential 0
checkbutton .check_supervised -text "Supervised trainning potential" -variable supervised_potential
pack .check_population .check_vasconcelos .check_dest .check_random .check_supervised



# Execute Button
button .input.b -text START -activebackground red -activeforeground orange -command  { 

# Global variables
global check_population
global check_vasconcelos
global check_dest

 set path_observations /home/savage/observations_hmm/
 set program /home/savage/robots/ViRbot/GoTo_sim_MV_SNRS_tcp
 set transform /home/savage/robots/genetics/genetics_state_machine/transform_gen
 set command "cp"
 set cat "cat"
 set delete "rm"
 set gen /home/savage/robots/genetics/genetics_state_machine/genetics_general 
 set num_ind $num_points
 set num_gen $num_regions
 set n_best $num_best

 set name_pop $name
 set map_pop $map
 puts "test $map $map_pop"
 set line "_"
 set line_gen "_gen_0.raw"
 set name_pop_ "$name_pop$line"
 set cero "0"
 set name_pop_0 "nn_$name_pop$line$cero.dat"
 set laser_file  "laser_$map$line_gen"
 set map_0 "_map_0.raw"
 set map0_raw "laser_$map_pop$map_0"
 set map_1 "_map_0_1.raw"
 set map1_raw "laser_$map_pop$map_1"
 set map_sup "laser_map_sup_"


 set fitness_population "fitness_population.dat"
 set average_fitness_population "average_fitness_population.dat"
 set fits "fits.dat"
 set sum_fits "sum_fits.dat"
 set average_fits "average_fits.dat"
 set fitness_file "fitness.dat"
 set fitness_file_ "fitness_"


 set num_nodes $old_num_nodes
 set K2 $Old_K2



 # -x 16 -y 112 -v 271 -z 111
 # -x 5 -y 380 -v 282 -z 380
 # -x 25 -y 379 -v 146 -z 497
 # -x 33 -y 383 -v 250 -z 386
 # -x 43 -y 135 -v 261 -z 138
 #set x 3
 #set y 135
 #set v 279
 #set z 138
 set name_pop $name
 set line "_"
 set line_gen "_gen_0.raw"
 set name_pop_ "$name_pop$line"
 set cero "0"
 set one "1"
 set name_pop_0 "$name_pop$line$cero.dat"
 set name_pop_1 "$name_pop$line$one.dat"
 set laser_file  "laser_$map$line_gen"
 #set inc_x 1
 #set inc_y 10 
 #set inc_v 1
 #set inc_z 10
 #set x [expr $xx - $incxx]
 #set y [expr $yy - $incyy]
 #set v [expr $vv - $incvv]
 #set z [expr $zz - $inczz]

 set x $xx
 set y $yy
 set v $vv
 set z $zz

 #set final_x [expr $x + 100]
 #set final_y [expr $y + 200]
 #set final_v [expr $v + 100]
 #set final_z [expr $z + 200]
 set initial_x $x
 set initial_y $y
 set initial_v $v
 set initial_z $z
 set initial_angle $angle
 set num_bits_states $num_bits_st
 set num_states [expr 2 <<  ($num_bits_states - 1) ]
# FIX this later
 #set num_outputs [expr 2 << $num_bits_outputs]
 set num_outputs 5 
 set NUM_BITS_DESTINATION 2
 set NUM_BITS_INTENSITY 1
 set num_bits_in [expr $num_bits_inputs + $NUM_BITS_DESTINATION $NUM_BITS_INTENSITY]
 set num_inputs [expr 2 <<  ($num_bits_in - 1) ]
 puts "num_bits_in $num_bits_in num_inputs $num_inputs"

 set num_Pi [expr $num_states]
 set num_A [expr $num_states * $num_states]
 set num_B [expr $num_states * $num_inputs]
 set num_C [expr $num_states * $num_inputs * $num_outputs]
# FIX this later
 #set num_bits_individuals [expr $num_bits_states + $num_bits_in + $num_bits_outputs + $num_prb * ( $num_Pi + $num_A + $num_B + $num_C ) ]
 #set num_bits_individuals [expr $num_prb * ( $num_Pi + $num_A + $num_B + $num_C ) ]
 set num_bits_individuals [expr $num_prb * ( $num_Pi + $num_A + $num_B + $num_C ) ]
 puts "num_bits_individuals $num_bits_individuals"




 if { $check_vasconcelos == 1 } {
	 set num_individuals [expr $num_ind * 2]
 } else { 
	set num_individuals $num_ind
 }


 if { $check_population == 1 } {

	#puts "rm /home/savage/observations/$name_pop*.dat"
	#catch {exec rm /home/savage/observations/$name_pop_*.dat} result
 	#puts $result
 	if { $check_vasconcelos == 0 } {
		puts "$gen genera standard $path_observations $num_ind $num_bits_individuals $name_pop"
 		catch {exec $gen genera standard $path_observations $num_ind $num_bits_individuals $name_pop  > test.dat 2> error.dat} result
	} else {
		puts "$gen genera vasconcelos $path_observations $num_ind $num_bits_individuals $name_pop"
 		catch {exec $gen genera vasconcelos $path_observations $num_ind $num_bits_individuals $name_pop  > test.dat 2> error.dat} result
 	}
	#puts $result
	set check_population 0 
 }


 #It deletes the fitness file fitness_population.dat      
 puts "$delete $path$fitness_population"
 catch {exec $delete $path$fitness_population} result
 #puts $result

 #It deletes the average fitness file average_fitness_population.dat      
 puts "$delete $path$average_fitness_population"
 catch {exec $delete $path$average_fitness_population} result
 #puts $result

 # it generates the origen and destination points and the supervized behaviors
 set x $initial_x
 set y $initial_y
 set v $initial_v
 set z $initial_z

 if { $initial_y != $endyy } {
                if { $incyy == 0 } {
			set incyy 1
		}
 }

 set num_test 0
 set flag 1

 while {$flag==1} {

                set num_test [expr $num_test + 1]
		set xxx($num_test) $x
		set yyy($num_test) $y
		set vvv($num_test) $v
		set zzz($num_test) $z
		set anglesss($num_test) $angle

		#puts "Num_test $num_test origen Xo $x Yo $y destination Xd $v Yd $z angle $angle"
		puts "Num_test $num_test origen Xo $xxx($num_test) Yo $yyy($num_test) destination Xd $vvv($num_test) Yd $zzz($num_test) angle $anglesss($num_test)"

                if { $supervised_potential == 1 } {
                        # It executes GoTo with the potential field aproach
                        puts "$program -e $map -x $x -y $y -v $v -z $z -r 2001 -a localhost -w 2005 -s laser -i 2002 -j localhost -k 2006 -l 16 -n $num_nodes -t $angle -f 0 -g 0 -q 3 -m 0 -p $advance -o 0"

                        catch {exec $program -e $map -x $x -y $y -v $v -z $z -r 2001 -a localhost -w 2005 -s laser -i 2002 -j localhost -k 2006 -l 16 -n $num_nodes -t $angle -f 0 -g 0 -q 3 -m 0 -p $advance -o 0 > test.dat 2> error.dat} result

                        # It copies the potentials field path
                        puts "$command $path$map0_raw $path$map_sup$num_test.raw"
                        catch {exec $command $path$map0_raw $path$map_sup$num_test.raw} result

                }

		set x [expr $x + $incxx]
                set y [expr $y + $incyy]
                set angle [expr $angle + $inctheta]

                if { $check_dest == 1 } {
                        set angle1 [expr $angle * -1]
                        set radius [expr $advance * 200]
                        set randNum_x [expr { int(20 * rand()) }]
                        set randNum_y [expr { int(20 * rand()) }]
                        set v [expr { $radius * cos($angle1) + $x + $randNum_x}]
                        set z [expr { $radius * sin($angle1) + $y + $randNum_y}]

                } else {
                	set v [expr $v + $incvv]
                	set z [expr $z + $inczz]
		}
  
                if { $x > $endxx } {
                                set x $initial_x
                }
                if { $y >= $endyy } {
                                set y $initial_y
                                set flag 0
                }
                if { $v > $endvv } {
                                set v $initial_v
                }
                if { $z > $endzz } {
                                set z $initial_z
                }
                if { $angle > $endtheta } {
                                set $angle $initial_angle
                }

 }


 for {set i 0} {$i< $num_gen} {incr i} {
   	puts "i  $i"

     #It deletes the fitness file fitness.dat      
     puts "$delete /home/savage/observations/fitness.dat"
     catch {exec $delete /home/savage/observations/fitness.dat} result
     puts $result


     # It transform the raw bits to a state machine structure 
    puts "$transform state_machine_hmm $path_observations $num_individuals $num_states $num_outputs $num_bits_in $num_inputs $num_bits_individuals $name_pop $num_prb" 
    catch {exec $transform state_machine_hmm $path_observations $num_individuals $num_states $num_outputs $num_bits_in $num_inputs $num_bits_individuals $name_pop $num_prb > test_transform.dat 2> error.dat} result
    puts $result

    set average_generation 0
    set bigger 0
    set index 0

    for {set j 0} {$j<$num_individuals} {incr j} {
       	puts "$i  $j"
       	set flag 1
       	set sum 0

	puts "********************************************"

	# It copies the individual to state_machine_hmm.txt 
	puts "$command /home/savage/observations/hmm_$name_pop_$j.dat /home/savage/observations/hmm_fsm.prb"
	catch {exec $command /home/savage/observations/hmm_$name_pop_$j.dat /home/savage/observations/hmm_fsm.prb} result
	#puts $result

    	for {set num_pnt 1} {$num_pnt<=$num_test} {incr num_pnt} {

       		set x $xxx($num_pnt)
       		set y $yyy($num_pnt)
       		set v $vvv($num_pnt)
       		set z $zzz($num_pnt)
		set angle $anglesss($num_pnt)


	
		puts "Generation $i individual $j origen Xo $x Yo $y Angle $angle destination Xd $v Yd $z"

		# It executes GoTo with HMMs
		#puts "$program -e $map -x $x -y $y -v $v -z $z -r 2001 -a localhost -w 2005 -s laser -i 2002 -j localhost -k 2006 -l 16 -n 32 -t $angle -f 0 -g 0 -q 4 -m 0 -p $advance -o $random"

		catch {exec $program -e $map -x $x -y $y -v $v -z $z -r 2001 -a localhost -w 2005 -s laser -i 2002 -j localhost -k 2006 -l 16 -n 32 -t $angle -f 0 -g 0 -q 4 -m 0  -p $advance -o $random > test.dat 2> error.dat} result
		#puts $result

		# it shows the individual's fitness value
        	set file [open $path$laser_file r]
        	set fitness [read $file]
        	close $file

		if { $supervised_potential == 1 } {

 			# It copies the potentials field path
 			#puts "$command $path$map_sup$num_pnt.raw $path$map1_raw"
 			catch {exec $command $path$map_sup$num_pnt.raw $path$map1_raw} result

			# It compares the path with the potential field path
        		#puts "./compare_raw_files $path $map0_raw $map1_raw fits.dat"
        		catch { exec ./compare_raw_files $path $map0_raw $map1_raw fits.dat} result
        		#puts $result
			# it shows the individual's fitness value compared to the potential field
        		set file [open $path$fits r]
        		set fitness_pot [read $file]
        		#set num_stuck [read $file]
        		#set num_obs [read $file]
        		#puts "fitness pot $fitness_pot"
        		#puts "fitness pot*K2 [expr $fitness_pot* $K2]"
        		close $file

        		set total_fit [expr [expr $fitness* $K1] + [expr $fitness_pot* $K2]]

		} else {
        		set total_fit [expr $fitness* $K1]
		}


        	puts "total fitness $total_fit"
		set sum [expr $sum + $total_fit]

   		#puts "$command $path$sum_fits $path$fitness_file_$i.dat"
   		catch {exec $command $path$sum_fits $path$fitness_file_$i.dat} result

  	}
     

	set average_generation [expr $average_generation + $sum/$num_test]
	set sum_div [expr $sum/$num_test]
	if { $sum_div > $bigger } {
			set bigger $sum_div
			set index $j
	}


        set fo [open $path$sum_fits w]
        puts $fo $sum_div
        puts "Individual $j num_test $num_test average fitness $sum_div"
        close $fo

	# it adds the individual's fitness value to the population fitness
	#puts "$cat $path$sum_fits >> $path$fitness_file"
       	catch {exec $cat $path$sum_fits >> $path$fitness_file} result
	#puts $result

	puts "------------------------------------------------------------"

     }

     puts "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
     puts "generation $i"

     #it saves the fitness of the best individual 
     set fo [open $path$sum_fits w]
     puts $fo $bigger
     puts "num_test $num_test total fitness $bigger"
     close $fo
     catch {exec $cat $path$sum_fits >> $path$fitness_population} result
     puts "Best individual $index fitness $bigger"


     #It saves the average of the population fitness  
     set average_generation [expr $average_generation / $num_individuals]
     set fo [open $path$average_fits w]
     puts $fo $average_generation
     close $fo
     puts "Average generation $average_generation"
     #puts "$cat $path$average_fits >> $path$average_fitness_population"
     catch {exec $cat $path$average_fits >> $path$average_fitness_population} result


     #It generates a new population
     if { $check_vasconcelos == 0 } {
   	#puts "$gen standard $path_observations $num_ind $num_bits_individuals $name_pop $mutation_rate $crossing_rate $n_best"
   	catch {exec $gen standard $path_observations $num_ind $num_bits_individuals $name_pop $mutation_rate $crossing_rate $n_best} result
     } else {

   	#puts "$gen vasconcelos $path_observations $num_ind $num_bits_individuals $name_pop $mutation_rate $crossing_rate $n_best"
   	catch {exec $gen vasconcelos $path_observations $num_ind $num_bits_individuals $name_pop $mutation_rate $crossing_rate $n_best} result

     }


    # It transform the raw bits to a state machine structure 
    #puts "$transform state_machine_hmm $path_observations $num_individuals $num_states $num_outputs $num_bits_in $num_inputs $num_bits_individuals $name_pop $num_prb"
    catch {exec $transform state_machine_hmm $path_observations $num_individuals $num_states $num_outputs $num_bits_in $num_inputs $num_bits_individuals $name_pop $num_prb > test_transform.dat 2> error.dat} result

  #puts "$transform state_machine_hmm $path_observations $num_individuals $num_bits_states $num_bits_outputs $num_bits_in $num_bits_individuals $name_pop $num_prb"
  #catch {exec $transform state_machine_hmm $path_observations $num_individuals $num_bits_states $num_bits_outputs $num_bits_in $num_bits_individuals $name_pop  $num_prb > test_transfor_2.dat 2> error.dat} result
  #puts $result

 } 

  #it calculates the perfomance of the best individual
  # It copies the best individual to state_machine.txt 
  #puts "$command /home/savage/observations/$name_pop_0 /home/savage/observations/state_machine.txt"
  #catch {exec $command /home/savage/observations/$name_pop_0 /home/savage/observations/state_machine.txt} result
  #puts "$command /home/savage/observations/hmm_$name_pop_0 /home/savage/observations/hmm_fsm.prb"
  #catch {exec $command /home/savage/observations/hmm_$name_pop_0 /home/savage/observations/hmm_fsm.prb} result
  #puts $result

  puts "Best individual $index fitness $bigger"
  puts "$command /home/savage/observations/hmm_$name_pop_$index.dat /home/savage/observations/hmm_fsm.prb"
  catch {exec $command /home/savage/observations/hmm_$name_pop_$index.dat /home/savage/observations/hmm_fsm.prb} result
  #puts $result

  # It executes GoTo
  puts "$program -e $map -x $x -y $y -v $v -z $z -r 2001 -a localhost -w 2005 -s laser -i 2002 -j localhost -k 2006 -l 16 -n 32 -t $angle -f 0 -g 0 -q 4 -m 0 -p $advance -o $random "
  catch {exec $program -e $map -x $x -y $y -v $v -z $z -r 2001 -a localhost -w 2005 -s laser -i 2002 -j localhost -k 2006 -l 16 -n 32 -t $angle -f 0 -g 0 -q 4 -m 0 -p $advance -o $random} result
  #puts $result

  #It copies the result to gen_*.raw	
  puts "$command /home/savage/observations/$laser_file /home/savage/observations/gen_0.raw"
  catch {exec $command /home/savage/observations/$laser_file /home/savage/observations/gen_0.raw} result
  #puts $result

  # it shows the individual's fitness value
  set file [open $path$laser_file r]
  set fitness [read $file]
  #puts "fitness distance, etc, $fitness"
  close $file


 if { $supervised_potential == 1 } {

 	# It compares the path with the potential field path
 	puts "./compare_raw_files $path $map0_raw $map1_raw fits.dat"
 	catch { exec ./compare_raw_files $path $map0_raw $map1_raw fits.dat} result
 	#puts $result

 	# it shows the individual's fitness value compared to the potential field
 	set file [open $path$fits r]
 	set fitness_pot [read $file]
 	puts "fitness pot*K2 [expr $fitness_pot* $K2]"
 	close $file

 	set total_fit [expr [expr $fitness* $K1] + [expr $fitness_pot* $K2]]

 } else {
 	set total_fit [expr $fitness* $K1]
 }

 puts "best individual $index fitness $total_fit"


}



# Grid input
grid config .input.label_num_points -column 0 -row 0 -sticky e
grid config .input.num_points -column 1 -row 0 -sticky snew
grid config .input.label_num_regions -column 2 -row 0 -sticky e
grid config .input.num_regions -column 3 -row 0 -sticky snew
grid config .input.label_epsilon -column 0 -row 1 -sticky e
grid config .input.epsilon -column 1 -row 1 -sticky snew
grid config .input.label_name -column 2 -row 1 -sticky e
grid config .input.name -column 3 -row 1 -sticky snew
grid config .input.label_crossing -column 0 -row 3 -sticky e
grid config .input.crossing -column 1 -row 3 -sticky snew
grid config .input.label_num_best -column 2 -row 3 -sticky e
grid config .input.num_best -column 3 -row 3 -sticky snew
grid config .input.label_K1 -column 0 -row 4 -sticky e
grid config .input.k1 -column 1 -row 4 -sticky snew
grid config .input.label_K2 -column 2 -row 4 -sticky e
grid config .input.k2 -column 3 -row 4 -sticky snew
grid config .input.b -column 3 -row 5 -sticky snew




# Simulation Panel
# Labels
toplevel .sim
label .sim.label_x -text "X"
label .sim.label_y -text "Y"
label .sim.label_v -text "V"
label .sim.label_z -text "Z"
label .sim.label_angle -text "Theta"
label .sim.label_map -text "Map"
label .sim.label_advance -text "Advance"
label .sim.label_incx -text "IncX"
label .sim.label_incy -text "IncY"
label .sim.label_incv -text "IncV"
label .sim.label_incz -text "IncZ"
label .sim.label_inctheta -text "IncTheta"
label .sim.label_endx -text "EndX"
label .sim.label_endy -text "EndY"
label .sim.label_endv -text "EndV"
label .sim.label_endz -text "EndZ"
label .sim.label_endtheta -text "EndTheta"
label .sim.label_num_nodes -text "N.Nds.Map"
label .sim.label_path -text "Path"


# Entries
entry .sim.x -width 5 -textvariable xx -foreground green -background blue
#.sim.x insert 0 "130"
.sim.x insert 0 "10"
entry .sim.y -width 5 -textvariable yy -foreground green -background blue
.sim.y insert 0 "200"
#.sim.y insert 0 "150"
entry .sim.v -width 5 -textvariable vv -foreground green -background blue
.sim.v insert 0 "600"
#.sim.v insert 0 "300"
entry .sim.z -width 5 -textvariable zz -foreground green -background blue
.sim.z insert 0 "200"
#.sim.z insert 0 "150"
entry .sim.angle -width 5 -textvariable angle -foreground green -background blue
#.sim.angle insert 0 "4.5"
.sim.angle insert 0 "0.0"
entry .sim.map -width 20 -textvariable map -foreground green -background blue
.sim.map insert 0 "obstacles"
entry .sim.advance -width 5 -textvariable advance -foreground green -background blue
.sim.advance insert 0 "1.5"
entry .sim.incx -width 5 -textvariable incxx -foreground green -background blue
.sim.incx insert 0 "0"
entry .sim.incy -width 5 -textvariable incyy -foreground green -background blue
.sim.incy insert 0 "0"
entry .sim.incv -width 5 -textvariable incvv -foreground green -background blue
.sim.incv insert 0 "0"
entry .sim.incz -width 5 -textvariable inczz -foreground green -background blue
.sim.incz insert 0 "0"
entry .sim.inctheta -width 5 -textvariable inctheta -foreground green -background blue
.sim.inctheta insert 0 "0"
entry .sim.endx -width 5 -textvariable endxx -foreground green -background blue
.sim.endx insert 0 "140"
entry .sim.endy -width 5 -textvariable endyy -foreground green -background blue
.sim.endy insert 0 "200"
entry .sim.endv -width 5 -textvariable endvv -foreground green -background blue
.sim.endv insert 0 "650"
entry .sim.endz -width 5 -textvariable endzz -foreground green -background blue
.sim.endz insert 0 "400"
entry .sim.endtheta -width 5 -textvariable endtheta -foreground green -background blue
.sim.endtheta insert 0 "0.7075"
entry .sim.num_nodes -width 5 -textvariable old_num_nodes -foreground green -background blue
.sim.num_nodes insert 0 "0"
entry .sim.file_xytheta -width 15 -textvariable file_xytheta -foreground green -background blue
.sim.file_xytheta insert 0 "file_xytheta"
entry .sim.path -width 35 -textvariable path -foreground green -background blue
.sim.path insert 0 "/home/savage/observations/"






# Grid sim
grid config .sim.label_x -column 0 -row 0 -sticky e
grid config .sim.x -column 1 -row 0 -sticky snew
grid config .sim.label_y -column 2 -row 0 -sticky e
grid config .sim.y -column 3 -row 0 -sticky snew
grid config .sim.label_v -column 0 -row 1 -sticky e
grid config .sim.v -column 1 -row 1 -sticky snew
grid config .sim.label_z -column 2 -row 1 -sticky e
grid config .sim.z -column 3 -row 1 -sticky snew
grid config .sim.label_angle -column 0 -row 2 -sticky e
grid config .sim.angle -column 1 -row 2 -sticky snew
grid config .sim.label_map -column 2 -row 2 -sticky snew
grid config .sim.map -column 3 -row 2 -sticky snew
grid config .sim.label_advance -column 0 -row 3 -sticky e
grid config .sim.advance -column 1 -row 3 -sticky snew
grid config .sim.label_endx -column 4 -row 2 -sticky e
grid config .sim.endx -column 5 -row 2 -sticky snew
grid config .sim.label_endy -column 6 -row 2 -sticky e
grid config .sim.endy -column 7 -row 2 -sticky snew
grid config .sim.label_endv -column 4 -row 3 -sticky e
grid config .sim.endv -column 5 -row 3 -sticky snew
grid config .sim.label_endz -column 6 -row 3 -sticky e
grid config .sim.endz -column 7 -row 3 -sticky snew
grid config .sim.label_incx -column 4 -row 0 -sticky e
grid config .sim.incx -column 5 -row 0 -sticky snew
grid config .sim.label_incy -column 6 -row 0 -sticky e
grid config .sim.incy -column 7 -row 0 -sticky snew
grid config .sim.label_incv -column 4 -row 1 -sticky e
grid config .sim.incv -column 5 -row 1 -sticky snew
grid config .sim.label_incz -column 6 -row 1 -sticky e
grid config .sim.incz -column 7 -row 1 -sticky snew
grid config .sim.label_inctheta -column 4 -row 4 -sticky e
grid config .sim.inctheta -column 5 -row 4 -sticky snew
grid config .sim.label_endtheta -column 6 -row 4 -sticky e
grid config .sim.endtheta -column 7 -row 4 -sticky snew
grid config .sim.label_num_nodes -column 2 -row 4 -sticky e
grid config .sim.num_nodes -column 3 -row 4 -sticky snew
grid config .sim.label_path -column 4 -row 5 -sticky snew
grid config .sim.path -column 5 -row 5 -sticky snew



# State Machine panel
toplevel .st

# Labels state
label .st.label_num_states -text "Number of bits for states"
label .st.label_num_outputs -text "Number of bits for outputs"
label .st.label_num_inputs -text "Number of bits for inputs (should be an odd num)"
label .st.label_num_prb -text "Number of bits for probabilities"

# Entries state
entry .st.num_states -width 2 -textvariable num_bits_st -foreground green -background blue
.st.num_states insert 0 "3"
entry .st.num_outputs -width 2 -textvariable num_bits_outputs -foreground green -background blue
.st.num_outputs insert 0 "3"
entry .st.num_inputs -width 2 -textvariable num_bits_inputs -foreground green -background blue
.st.num_inputs insert 0 "2"
entry .st.num_prb -width 2 -textvariable num_prb -foreground green -background blue
.st.num_prb insert 0 "8"

# Grid state
grid config .st.label_num_states -column 0 -row 0 -sticky e
grid config .st.num_states -column 1 -row 0 -sticky snew
#grid config .st.label_num_outputs -column 2 -row 0 -sticky e
#grid config .st.num_outputs -column 3 -row 0 -sticky snew
grid config .st.label_num_inputs -column 0 -row 1 -sticky e
grid config .st.num_inputs -column 1 -row 1 -sticky snew
grid config .st.label_num_prb -column 2 -row 1 -sticky e
grid config .st.num_prb -column 3 -row 1 -sticky snew



grid config .input.label_name -column 2 -row 1 -sticky e
grid config .input.name -column 3 -row 1 -sticky snew

