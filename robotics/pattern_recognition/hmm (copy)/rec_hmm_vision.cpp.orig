//
// rec_hmm_vision.cpp
//
// This program recognizes an image pattern using HMM
// represent images' readings
//
// make -f Makefile_rec_hmm_vision
//
//  J. Savage, 4-22-2009
//      FI- UNAM
//


#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>




#include "/home/savage/vision/pattern_recognition/include_vision/basics_vqs_vision.h"
#include "/home/savage/vision/pattern_recognition/vq_vision/new_allocate.h"
#include "hmm_vision_lib.h"








int main(int argc, char *argv[])
{

    /* it gets line inputs */
    get_inputs(argc,argv,objects_file,data_file,&size_vq,path,vq_file,&num_states);


    // it reads the centroids
// it allocates centroids space
    if ((centroids_vision = (Centroid *)
                            malloc( (size_vq+1) * sizeof(Centroid))) == NULL) {
        fprintf(stdout,"Allocation error: centroids");
        exit(0);
    }
    num_centroids_vision= read_vision_centroids(vq_file,centroids_vision,size_vectors,size_vq,path);



// it reads the names of the objects to be recognized
    if ( (objects_name = (char **) alloc_matrix_char(30, 300)) == 0) {
        printf("\n Memory allocation error ");
        exit(0);
    }

    num_objects=read_objects_name(objects_file,objects_name,path);

    for (i=1;i<=num_objects;i++) {
        printf("objects %s\n",objects_name[i]);
    }



//it reads each the objects' HMMs
// It allocates the matrices used for the hmm evaluation

    ais = (float ***)  malloc( (unsigned) (num_objects+1)*sizeof(float *));
    bis = (float ***) malloc( (unsigned) (num_objects+1)*sizeof(float *));
    pis = (float **)   malloc( (unsigned) (num_objects+1)*sizeof(float *));


    for (j=1;j<=num_objects;j++) {


        if ((ais[j] =(float **)alloc_matrix(num_states+1, num_states+1 )) == 0) {
            printf("\n Memory allocation error ");
            exit(1);
        }


        if ((bis[j] =(float **)alloc_matrix(num_states+1,size_vq+1)) == 0) {
            printf("\n Memory allocation error ");
            exit(1);
        }

        if ((pis[j] =(float *)alloc_vector(num_states+1)) == 0) {
            printf("\n Memory allocation error ");
            exit(1);
        }

    }



    /* It reads the hmm of each of the symbols */
    read_hmms(objects_name,num_objects,ais,bis,pis,num_states,size_vq,path);



// it reads the image vectors
// it gets the number of vectors and their size
    sprintf(in_file,"%s%s.raw",path,data_file);
    num_vectors=get_size_image_vectors(in_file,&size_vectors);
    printf("%s num. vectors %d size vectors %d\n",in_file,num_vectors, size_vectors);

    /* it allocates raw vectors space */
    if ((vectors = (Raw *) malloc( (num_vectors+1) * sizeof(Raw))) == NULL) {
        fprintf(stdout,"Allocation error: Raw vectors");
        return(0);
    }

// it reads the input image vectors
    read_image_vectors(in_file,vectors);


// it allocates the observations vectors //
    if ((observations = (int *) alloc_vector_int((num_vectors+1)) ) == 0) {
        printf("\n Memory allocation error: observations ");
        exit(0);
    }

// it allocates the states vectors
    for (i=1;i<=num_objects;i++)
        if ((seq_states[i] = (int *) alloc_vector_int((num_vectors+1))) == 0) {
            printf("\n Memory allocation error: observations ");
            exit(0);
        }


// It quantizes the data
    quantize_vectors(centroids_vision,num_vectors,vectors,observations,num_centroids_vision,size_vectors);



    bigger=0;
    bigger_vit=0;

    for (i=1;i<=num_objects;i++) {

        // It calculates the probabilities of each of the hmms
        prob[i]=get_hmm_prob(observations,ais[i],bis[i],pis[i],num_vectors,num_states);
        // The result is divided by 10 in order that the result fits the variable size
        prob[i]=exp(prob[i]/10.);
        //printf("object %s probability %e\n",objects_name[i],prob[i]);

        if (prob[i]>bigger) {
            bigger=prob[i];
            index=i;

        }

        /* It calculates the best sequence of states using the Viterbi algorithm
         * and the probability of a hmm given a symbol vector */
        vit_prob[i]=viterbi(observations,ais[i],bis[i],pis[i],num_vectors,num_states,seq_states[i]);
        vit_prob[i]=exp(vit_prob[i]/10.);
        printf("object %s Viterbi probability %e\n",objects_name[i],vit_prob[i]);

        if (vit_prob[i]>bigger_vit) {
            bigger_vit=vit_prob[i];
            index_vit=i;

        }


    }


    for (i=1;i<=num_objects;i++) {
        printf("object %s probability %e\n",objects_name[i],prob[i]);
        printf("object %s Viterbi probability %e\n",objects_name[i],vit_prob[i]);
    }
    printf("\n\n ****** Winner object %s %e ***** \n",objects_name[index],prob[index]);
    printf("\n\n ****** Winner Vitterbi object %s %e ***** \n",objects_name[index_vit],vit_prob[index_vit]);


}



