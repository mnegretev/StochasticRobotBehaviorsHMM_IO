;************************************************
;*                                              *
;*      action_planner.clp                      *
;*                                              *
;*      Jesus Savage                            *
;*                                              *
;*              Bio-Robotics Laboratory         *
;*              UNAM, 2019                      *
;*                                              *
;*                                              *
;************************************************



;************************************************
;*                              		*
;*      Templates' definitions          	*
;*                                              *
;************************************************

(deftemplate on-top-of
	(slot upper)
	(slot lower)
)


(deftemplate goal (slot move)(slot on-top-of))


(deftemplate item
        (slot type)
        (slot name)
        (slot zone)
        (slot image)
        (slot attributes)
        (multislot pose)
        (slot belongs)
        (slot status)
)

(deftemplate human
        (slot name)
        (slot zone)
        (slot image)
        (slot attributes)
        (multislot pose)
        (slot carring)
        (slot status)
)

(deftemplate robot
        (slot name)
        (slot zone)
        (slot image)
        (slot attributes)
        (multislot pose)
        (slot carring)
        (slot status)
)




;************************************************
;*                                              *
;*      Environment initial state               *
;*                                              *
;************************************************

(deffacts Initial-state-objects-rooms-zones-actors

        ;;; Objects 
        (item (type Objects) (name apple) (zone corridor) (image apple) (attributes pick) (pose 0.07 0.52 2.0))
        (item (type Objects) (name sushi) (zone corridor) (image sushi) (attributes pick) (pose 0.07 0.57 1.0))
        (item (type Objects) (name milk) (zone corridor) (image milk) (attributes pick) (pose 0.07 0.62 0.0))
        (item (type Objects) (name soap) (zone corridor) (image soap) (attributes pick) (pose 0.12 0.55 0.0))
        (item (type Objects) (name shampoo) (zone corridor) (image shampoo) (attributes pick) (pose 0.12 0.60 0.0))
        (item (type Objects) (name book) (zone deposit) (image book) (attributes pick) (pose 0.12 0.92 0.0))
        (item (type Objects) (name hammer) (zone deposit) (image hammer) (attributes pick) (pose 0.16 0.92 2.0))

        ;;;ROOMS
        ( item (type Room) (name deposit) (pose 0.29 0.93 0.0))
        ( item (type Room) (name kitchen) (pose 0.68 1.10 0.0))
        ( item (type Room) (name corridor) (pose 0.39 0.58 0.0))
        ( item (type Room) (name studio) (pose 0.13 0.24 0.0))
        ( item (type Room) (name bedroom) (pose 0.40 0.28 0.0))
        ( item (type Room) (name service) (pose 0.67 0.29 0.0))

        ;;; DOORS       
        ( item (type Door) (name fridgedoor) (zone kitchen) (status closed) (belongs fridge)(pose 0.72 0.89 0.0))
        ( item (type Door) (name entrance) (zone corridor) (status closed) (belongs corridoor_wall) (pose 0.6 0.57 0.0))

        ;;; FURNITURE
        (item (type Furniture) (name bedroom_table) (zone bedroom) (pose 0.38 0.16 0.0))
        (item (type Furniture) (name deposit_table) (zone deposit) (pose 0.19 1.13 0.0))
        (item (type Furniture) (name fridge) (zone kitchen) (pose 0.65 0.82 0.0))
        (item (type Furniture) (name service_table) (zone service) (pose 0.63 0.17 0.0))


        ;;; HUMANS
        ( human (name Mother) (zone bedroom) (pose 0.59 0.25 0.0))
        ( human (name Father) (zone service) (pose 0.73 0.21 0.0))


        ;;; ROBOTS
        ( robot (name Justina) (zone studio) (pose 0.09 0.16 0.0))


)


(deffacts initial-state
	(block A)
	(block B)
	(block C)
	(block D)
	(block E)
	(block F)
	(on-top-of (upper nothing)(lower A))
	(on-top-of (upper A)(lower B))
	(on-top-of (upper B)(lower C))
	(on-top-of (upper C)(lower floor))
	(on-top-of (upper nothing)(lower D))
	(on-top-of (upper D)(lower E))
	(on-top-of (upper E)(lower F))
	(on-top-of (upper F)(lower floor))
	;(goal (move C)(on-top-of E))
	(goal (move F)(on-top-of C))
)





;************************************************
;*                                              *
;*      RULES			                *
;*                                              *
;************************************************

(defrule clips-alive
	(declare (salience 1000))
        ?f <- (alive clips)
        =>
        (retract ?f)
        (printout t "ROS action-planner clips alive ROS")
)



(defrule move-directly
	(step ?step)
	?goal <- (goal (move ?block1) (on-top-of ?block2))
	(block ?block1)
	(block ?block2)
	(on-top-of (upper nothing) (lower ?block1))
	?stack-1 <- (on-top-of (upper ?block1)(lower ?block3))
	?stack-2 <- (on-top-of (upper nothing)(lower ?block2))
	=>
	(retract ?goal ?stack-1 ?stack-2)
	(assert (on-top-of (upper ?block1)(lower ?block2))
       	  	(on-top-of (upper nothing)(lower ?block3)))
	;(printout t ?block1 " moved on top of " ?block2 "." crlf)
	(printout t "ROS action-planner " ?block1 " moved on top of " ?block2 " ROS")
)


(defrule move-to-floor
	(step ?step)
	?goal <- (goal (move ?block1) (on-top-of floor))
	(block ?block1)
	(on-top-of (upper nothing) (lower ?block1))
	?stack <- (on-top-of (upper ?block1) (lower ?block2))	
	=>
	(retract ?goal ?stack)
	(assert (on-top-of (upper ?block1)(lower floor))
        	(on-top-of (upper nothing)(lower ?block2)))
	;(printout t ?block1 " moved on top of floor. " crlf)
	(printout t "ROS action-planner " ?block1 " moved on top of floor" " ROS")
)


(defrule clear-upper-block
	(goal (move ?block1))
	(block ?block1)
	(on-top-of (upper ?block2) (lower ?block1))
	(block ?block2)
	=>
	(assert (goal (move ?block2)(on-top-of floor)))
)



(defrule clear-lower-block
	(goal (on-top-of ?block1))
	(block ?block1)
	(on-top-of (upper ?block2) (lower ?block1))
	(block ?block2)
	=>
	(assert (goal (move ?block2)(on-top-of floor)))
)



(defrule step
	(declare (salience -1000))
        ?f <- (step ?step)
        =>
        (retract ?f)
        (printout t "ROS action-planner " ?step " moved on top of floor" " ROS")
)



